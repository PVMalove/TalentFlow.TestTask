// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TalentFlow.Infrastructure;

#nullable disable

namespace TalentFlow.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227160005_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ResumeUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("resume_url");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "TalentFlow.Domain.Models.Entities.Candidate.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("email");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "TalentFlow.Domain.Models.Entities.Candidate.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("first_name");

                            b1.Property<string>("SecondName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("second_name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_candidate");

                    b.ToTable("candidate", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.HrSpecialist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "TalentFlow.Domain.Models.Entities.HrSpecialist.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("email");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "TalentFlow.Domain.Models.Entities.HrSpecialist.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("first_name");

                            b1.Property<string>("SecondName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("second_name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_hr_specialist");

                    b.ToTable("hr_specialist", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.RecruitmentProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("candidate_id");

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("current_stage");

                    b.Property<bool>("ProbationPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("probation_passed");

                    b.Property<string>("Stages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recruitment_stage");

                    b.Property<Guid?>("TestAssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("test_assignment_id");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("pk_recruitment_processes");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_recruitment_processes_candidate_id");

                    b.HasIndex("TestAssignmentId")
                        .HasDatabaseName("ix_recruitment_processes_test_assignment_id");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("ix_recruitment_processes_vacancy_id");

                    b.ToTable("recruitment_processes", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.TestAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("assigned_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("assignment_status");

                    b.Property<DateTime?>("SubmissionDeadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("submission_deadline");

                    b.Property<string>("SubmissionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("submission_url");

                    b.HasKey("Id")
                        .HasName("pk_test_assignment");

                    b.ToTable("test_assignment", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("closing_date");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("HrSpecialistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("hr_specialist_id");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("opening_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_vacancies");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_vacancies_department_id");

                    b.HasIndex("HrSpecialistId")
                        .HasDatabaseName("ix_vacancies_hr_specialist_id");

                    b.ToTable("vacancies", (string)null);
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.RecruitmentProcess", b =>
                {
                    b.HasOne("TalentFlow.Domain.Models.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recruitment_processes_candidate_candidate_id");

                    b.HasOne("TalentFlow.Domain.Models.Entities.TestAssignment", "TestAssignment")
                        .WithMany()
                        .HasForeignKey("TestAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_recruitment_processes_test_assignment_test_assignment_id");

                    b.HasOne("TalentFlow.Domain.Models.Entities.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recruitment_processes_vacancies_vacancy_id");

                    b.Navigation("TestAssignment");
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.Vacancy", b =>
                {
                    b.HasOne("TalentFlow.Domain.Models.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_departments_department_id");

                    b.HasOne("TalentFlow.Domain.Models.Entities.HrSpecialist", null)
                        .WithMany("AssignedVacancies")
                        .HasForeignKey("HrSpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vacancies_hr_specialist_hr_specialist_id");
                });

            modelBuilder.Entity("TalentFlow.Domain.Models.Entities.HrSpecialist", b =>
                {
                    b.Navigation("AssignedVacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
